import { useCallback, useEffect, useState } from 'react';
import { useWallet } from '../wallet/useWallet';
import { PublicKey } from '@solana/web3.js';
import { Metaplex } from '@metaplex-foundation/js';

{{#if projectInfo.hasTypeScript}}
export interface NFTMetadata {
  name: string;
  symbol: string;
  description: string;
  image: string;
  attributes?: Array<{
    trait_type: string;
    value: string | number;
  }>;
  external_url?: string;
  properties?: {
    files?: Array<{ uri: string; type: string }>;
    category?: string;
    creators?: Array<{ address: string; share: number }>;
  };
}

export interface NFT {
  address: PublicKey;
  mint: PublicKey;
  metadata: NFTMetadata;
  uri: string;
  isFetching?: boolean;
  isLoaded?: boolean;
  error?: Error | null;
}
{{/if}}

/**
 * Hook for interacting with NFTs on Solana
 */
export const useNFTs = () => {
  const { publicKey, connection } = useWallet();
  const [nfts, setNfts] = useState{{#if projectInfo.hasTypeScript}}<NFT[]>{{/if}}([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<Error | null>(null);

  // Create Metaplex instance
  const metaplex = new Metaplex(connection);

  /**
   * Fetch all NFTs owned by the connected wallet
   */
  const fetchNFTs = useCallback(async () => {
    if (!publicKey) {
      setNfts([]);
      return;
    }

    setIsLoading(true);
    setError(null);

    try {
      // Fetch all NFTs for the connected wallet
      const nftData = await metaplex.nfts().findAllByOwner({ owner: publicKey });

      // Create NFT objects with minimal metadata
      const nftList = nftData.map((nft) => ({
        address: nft.address,
        mint: nft.mintAddress,
        uri: nft.uri,
        metadata: {
          name: nft.name,
          symbol: nft.symbol,
          description: '',
          image: '',
        },
        isFetching: true,
        isLoaded: false,
        error: null,
      }));

      setNfts(nftList);

      // Fetch detailed metadata for each NFT
      const loadedNfts = await Promise.all(
        nftList.map(async (nft) => {
          try {
            if (!nft.uri) {
              return {
                ...nft,
                isFetching: false,
                isLoaded: false,
                error: new Error('No metadata URI available'),
              };
            }

            // Fetch metadata from URI
            const response = await fetch(nft.uri);
            if (!response.ok) {
              throw new Error(`Failed to fetch metadata: ${response.statusText}`);
            }

            const metadata = await response.json();

            return {
              ...nft,
              metadata: {
                ...nft.metadata,
                ...metadata,
              },
              isFetching: false,
              isLoaded: true,
              error: null,
            };
          } catch (error) {
            console.error(`Error fetching metadata for NFT ${nft.mint.toString()}:`, error);
            return {
              ...nft,
              isFetching: false,
              isLoaded: false,
              error: error instanceof Error ? error : new Error('Unknown error fetching metadata'),
            };
          }
        })
      );

      setNfts(loadedNfts);
    } catch (err) {
      console.error('Error fetching NFTs:', err);
      setError(err instanceof Error ? err : new Error('Unknown error fetching NFTs'));
    } finally {
      setIsLoading(false);
    }
  }, [connection, publicKey, metaplex]);

  /**
   * Get an NFT by its mint address
   */
  const getNFTByMint = useCallback(
    (mintAddress: {{#if projectInfo.hasTypeScript}}PublicKey | string{{else}}any{{/if}}) => {
      const mintString = typeof mintAddress === 'string' ? mintAddress : mintAddress.toString();
      return nfts.find((nft) => nft.mint.toString() === mintString) || null;
    },
    [nfts]
  );

  /**
   * Transfer an NFT to a recipient
   */
  const transferNFT = useCallback(
    async (
      mintAddress: {{#if projectInfo.hasTypeScript}}PublicKey | string{{else}}any{{/if}},
      recipientAddress: {{#if projectInfo.hasTypeScript}}PublicKey | string{{else}}any{{/if}}
    ) => {
      if (!publicKey) {
        throw new Error('Wallet not connected');
      }

      try {
        const mintPubkey = typeof mintAddress === 'string' ? new PublicKey(mintAddress) : mintAddress;
        const recipientPubkey = typeof recipientAddress === 'string' ? new PublicKey(recipientAddress) : recipientAddress;

        // Build and execute the transfer transaction
        const transferBuilder = await metaplex
          .nfts()
          .builders()
          .transfer({
            nftOrSft: { address: mintPubkey },
            fromOwner: publicKey,
            toOwner: recipientPubkey,
          });

        const transferResult = await metaplex.rpc().sendAndConfirmTransaction(transferBuilder);

        // Refresh NFTs after transfer
        await fetchNFTs();

        return transferResult;
      } catch (error) {
        console.error('Error transferring NFT:', error);
        throw error;
      }
    },
    [publicKey, metaplex, fetchNFTs]
  );

  // Fetch NFTs when wallet changes
  useEffect(() => {
    if (publicKey) {
      fetchNFTs();
    } else {
      setNfts([]);
    }
  }, [publicKey, fetchNFTs]);

  return {
    nfts,
    isLoading,
    error,
    fetchNFTs,
    getNFTByMint,
    transferNFT,
  };
}; 