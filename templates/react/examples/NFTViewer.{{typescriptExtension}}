import React, { FC, useState, useEffect } from 'react';
import { useNFTs, NFT } from '../nfts/useNFTs';
import { NFTGallery } from '../nfts/NFTGallery';
import { useWallet } from '../wallet/useWallet';

/**
 * Example component for displaying and interacting with NFTs
 */
export const NFTViewer: FC = () => {
  const { publicKey } = useWallet();
  const { nfts, fetchNFTs, isLoading, transferNFT } = useNFTs();
  const [selectedNFT, setSelectedNFT] = useState<NFT | null>(null);
  const [transferTo, setTransferTo] = useState('');
  const [transferStatus, setTransferStatus] = useState<'idle' | 'processing' | 'success' | 'error'>('idle');
  const [transferError, setTransferError] = useState<string | null>(null);

  // Fetch NFTs when the component mounts
  useEffect(() => {
    if (publicKey) {
      fetchNFTs();
    }
  }, [publicKey, fetchNFTs]);

  // Handle NFT selection
  const handleSelectNFT = (nft: NFT) => {
    setSelectedNFT(nft);
    setTransferTo('');
    setTransferStatus('idle');
    setTransferError(null);
  };

  // Handle transfer input change
  const handleTransferToChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setTransferTo(e.target.value);
  };

  // Handle NFT transfer
  const handleTransferNFT = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!selectedNFT || !transferTo.trim()) {
      return;
    }
    
    setTransferStatus('processing');
    setTransferError(null);
    
    try {
      await transferNFT(selectedNFT.mint, transferTo);
      setTransferStatus('success');
      
      // Reset form and refresh NFTs
      setTimeout(() => {
        setSelectedNFT(null);
        fetchNFTs();
      }, 2000);
    } catch (error) {
      console.error('Error transferring NFT:', error);
      setTransferStatus('error');
      setTransferError(error instanceof Error ? error.message : 'Unknown error');
    }
  };

  // Close the NFT detail modal
  const closeNFTDetail = () => {
    setSelectedNFT(null);
    setTransferStatus('idle');
    setTransferError(null);
  };

  // Render wallet not connected message
  if (!publicKey) {
    return (
      <div className="nft-viewer-container not-connected">
        <h2>Your NFT Collection</h2>
        <p>Connect your wallet to view your NFTs</p>
      </div>
    );
  }

  return (
    <div className="nft-viewer-container">
      <h2>Your NFT Collection</h2>
      
      <div className="nft-controls">
        <button onClick={fetchNFTs} className="refresh-button">
          Refresh NFTs
        </button>
      </div>
      
      {/* NFT Gallery */}
      <NFTGallery 
        showEmpty={true}
        emptyMessage="No NFTs found in this wallet"
        showLoading={true}
        loadingMessage="Loading your NFTs..."
        gridColumns={3}
        onSelectNFT={handleSelectNFT}
      />
      
      {/* NFT Detail Modal */}
      {selectedNFT && (
        <div className="nft-detail-modal">
          <div className="nft-detail-content">
            <button className="close-button" onClick={closeNFTDetail}>Ã—</button>
            
            <div className="nft-detail-grid">
              <div className="nft-detail-image">
                {selectedNFT.metadata.image ? (
                  <img 
                    src={selectedNFT.metadata.image} 
                    alt={selectedNFT.metadata.name} 
                    onError={(e) => {
                      (e.target as HTMLImageElement).src = 'https://via.placeholder.com/400?text=Image+Error';
                    }}
                  />
                ) : (
                  <div className="nft-no-image">No Image Available</div>
                )}
              </div>
              
              <div className="nft-detail-info">
                <h3>{selectedNFT.metadata.name}</h3>
                
                {selectedNFT.metadata.symbol && (
                  <div className="nft-property">
                    <span className="property-label">Symbol:</span>
                    <span className="property-value">{selectedNFT.metadata.symbol}</span>
                  </div>
                )}
                
                <div className="nft-property">
                  <span className="property-label">Mint:</span>
                  <span className="property-value mint-address">{selectedNFT.mint.toString()}</span>
                </div>
                
                {selectedNFT.metadata.description && (
                  <div className="nft-description">
                    <h4>Description</h4>
                    <p>{selectedNFT.metadata.description}</p>
                  </div>
                )}
                
                {selectedNFT.metadata.attributes && selectedNFT.metadata.attributes.length > 0 && (
                  <div className="nft-attributes">
                    <h4>Attributes</h4>
                    <div className="attributes-grid">
                      {selectedNFT.metadata.attributes.map((attr, index) => (
                        <div key={index} className="attribute-item">
                          <span className="attribute-type">{attr.trait_type}</span>
                          <span className="attribute-value">{attr.value.toString()}</span>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
                
                {/* Transfer Form */}
                <div className="nft-transfer-section">
                  <h4>Transfer NFT</h4>
                  
                  {transferStatus === 'success' ? (
                    <div className="transfer-success-message">
                      NFT transferred successfully!
                    </div>
                  ) : (
                    <form onSubmit={handleTransferNFT} className="transfer-form">
                      <div className="form-group">
                        <label htmlFor="transferTo">Recipient Address</label>
                        <input
                          id="transferTo"
                          type="text"
                          value={transferTo}
                          onChange={handleTransferToChange}
                          placeholder="Enter Solana address"
                          disabled={transferStatus === 'processing'}
                        />
                      </div>
                      
                      <button
                        type="submit"
                        className="transfer-button"
                        disabled={!transferTo.trim() || transferStatus === 'processing'}
                      >
                        {transferStatus === 'processing' ? 'Processing...' : 'Transfer NFT'}
                      </button>
                      
                      {transferStatus === 'error' && transferError && (
                        <div className="transfer-error-message">
                          Error: {transferError}
                        </div>
                      )}
                    </form>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};