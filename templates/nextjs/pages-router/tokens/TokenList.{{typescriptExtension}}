import React, { FC, useState, useEffect } from 'react';
import { Connection, PublicKey } from '@solana/web3.js';
import { useWallet } from '../wallet';

interface TokenAccount {
  mint: string;
  owner: string;
  amount: string;
  decimals: number;
  uiAmount: number;
}

interface TokenListProps {
  connection: Connection;
}

export const TokenList: FC<TokenListProps> = ({ connection }) => {
  const { publicKey, connected } = useWallet();
  const [loading, setLoading] = useState(false);
  const [tokenAccounts, setTokenAccounts] = useState<TokenAccount[]>([]);

  useEffect(() => {
    async function getTokenAccounts() {
      if (!connected || !publicKey) {
        setTokenAccounts([]);
        return;
      }

      setLoading(true);
      try {
        const response = await connection.getParsedTokenAccountsByOwner(
          publicKey,
          {
            programId: new PublicKey('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'), // Token Program ID
          }
        );

        const accounts: TokenAccount[] = response.value
          .map((accountInfo) => {
            const parsedInfo = accountInfo.account.data.parsed.info;
            return {
              mint: parsedInfo.mint,
              owner: parsedInfo.owner,
              amount: parsedInfo.tokenAmount.amount,
              decimals: parsedInfo.tokenAmount.decimals,
              uiAmount: parsedInfo.tokenAmount.uiAmount,
            };
          })
          .filter((account) => account.uiAmount > 0); // Filter out empty accounts

        setTokenAccounts(accounts);
      } catch (error) {
        console.error('Error fetching token accounts:', error);
      } finally {
        setLoading(false);
      }
    }

    getTokenAccounts();
  }, [connection, publicKey, connected]);

  if (!connected) {
    return <div className="text-gray-500">Connect your wallet to view tokens</div>;
  }

  if (loading) {
    return <div className="text-gray-500">Loading token accounts...</div>;
  }

  if (tokenAccounts.length === 0) {
    return <div className="text-gray-500">No tokens found</div>;
  }

  return (
    <div className="space-y-4">
      <h2 className="text-xl font-semibold">Your Tokens</h2>
      <div className="overflow-hidden shadow ring-1 ring-black ring-opacity-5 rounded-lg">
        <table className="min-w-full divide-y divide-gray-300">
          <thead className="bg-gray-50">
            <tr>
              <th className="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900">
                Token Address
              </th>
              <th className="px-3 py-3.5 text-right text-sm font-semibold text-gray-900">
                Balance
              </th>
            </tr>
          </thead>
          <tbody className="divide-y divide-gray-200 bg-white">
            {tokenAccounts.map((account) => (
              <tr key={account.mint}>
                <td className="py-4 pl-4 pr-3 text-sm">
                  <div className="font-medium text-gray-900">
                    {account.mint.substring(0, 4)}...{account.mint.substring(account.mint.length - 4)}
                  </div>
                </td>
                <td className="px-3 py-4 text-right text-sm text-gray-500">
                  {account.uiAmount.toLocaleString(undefined, {
                    minimumFractionDigits: 0,
                    maximumFractionDigits: 9,
                  })}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
}; 